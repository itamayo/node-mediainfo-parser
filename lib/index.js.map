{"version":3,"sources":["../src/index.js"],"names":["parse","isNumeric","isNaN","parseFloat","n","isFinite","mapValue","value","ret","Array","isArray","transformResponse","res","file","tracks","track","map","buffer","callback","attrNameProcessors","name","explicitArray","explicitRoot","mergeAttrs","normalizeTags","tagNameProcessors","err","obj","exec","mediaPath","mediainfo","spawn","output","stdout","on","data","toString"],"mappings":";;;;;;kBAqBwBA,K;;AArBxB;;AACA;;AACA;;;;;;AAEA,IAAMC,YAAY,SAAZA,SAAY;AAAA,SAChB,CAACC,MAAMC,WAAWC,CAAX,CAAN,CAAD,IAAyBC,SAASD,CAAT,CADT;AAAA,CAAlB;;AAGA,IAAME,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,MAAMC,MAAMC,MAAMC,OAAN,CAAcH,KAAd,IAAuBA,MAAM,CAAN,CAAvB,GAAkCA,KAA9C;AACA,SAAON,UAAUO,GAAV,IAAiBA,MAAM,CAAvB,GAA2BA,GAAlC;AACD,CAHD;;AAKA,IAAMG,oBAAoB,SAApBA,iBAAoB,CAACC,GAAD,EAAS;AACjC;AACA,MAAIA,OAAOA,IAAIC,IAAf,EAAqB;AACnB,QAAMC,SAASL,MAAMC,OAAN,CAAcE,IAAIC,IAAJ,CAASE,KAAvB,IAAgCH,IAAIC,IAAJ,CAASE,KAAzC,GAAiD,CAACH,IAAIC,IAAJ,CAASE,KAAV,CAAhE;AACAH,QAAIC,IAAJ,CAASE,KAAT,GAAiBD,OAAOE,GAAP,CAAW;AAAA,aAAS,uBAAUD,KAAV,EAAiBT,QAAjB,CAAT;AAAA,KAAX,CAAjB;AACD;AACD,SAAOM,GAAP;AACD,CAPD;;AASe,SAASZ,KAAT,CAAeiB,MAAf,EAA4C;AAAA,MAArBC,QAAqB,uEAAV,YAAM,CAAE,CAAE;;AACzD,2BAAeD,MAAf,EAAuB;AACrBE,wBAAoB,CAAC;AAAA,mBAAYC,IAAZ;AAAA,KAAD,CADC;AAErBC,mBAAe,KAFM;AAGrBC,kBAAc,KAHO;AAIrBC,gBAAY,IAJS;AAKrBC,mBAAe,IALM;AAMrBC,uBAAmB;AANE,GAAvB,EAOG,UAACC,GAAD,EAAMC,GAAN,EAAc;AACf,QAAID,GAAJ,EAAS;AACPR,eAASQ,GAAT;AACA;AACD;AACDR,aAAS,IAAT,EAAeP,kBAAkBgB,GAAlB,CAAf;AACD,GAbD;AAcD;;AAED,SAASC,IAAT,CAAcC,SAAd,EAA8C;AAAA,MAArBX,QAAqB,uEAAV,YAAM,CAAE,CAAE;;AAC5C,MAAMY,YAAY,wBAAaC,KAAb,CAAmB,WAAnB,EAAgC,CAAC,QAAD,EAAW,cAAX,EAA2BF,SAA3B,CAAhC,CAAlB;AACA,MAAIG,SAAS,EAAb;AACAF,YAAUG,MAAV,CAAiBC,EAAjB,CAAoB,MAApB,EAA4B,UAACC,IAAD,EAAU;AAAEH,cAAUG,KAAKC,QAAL,CAAc,MAAd,CAAV;AAAkC,GAA1E;AACAN,YAAUI,EAAV,CAAa,OAAb,EAAsB;AAAA,WAAMlC,MAAMgC,MAAN,EAAcd,QAAd,CAAN;AAAA,GAAtB;AACD;;QAEOlB,K,GAAAA,K;QAAO4B,I,GAAAA,I","file":"index.js","sourcesContent":["import {camelCase, mapValues} from 'lodash';\nimport {parseString as xmlParseString} from 'xml2js';\nimport childProcess from 'child_process';\n\nconst isNumeric = n =>\n  !isNaN(parseFloat(n)) && isFinite(n);\n\nconst mapValue = (value) => {\n  const ret = Array.isArray(value) ? value[0] : value;\n  return isNumeric(ret) ? ret * 1 : ret;\n};\n\nconst transformResponse = (res) => {\n  /* eslint-disable no-param-reassign */\n  if (res && res.file) {\n    const tracks = Array.isArray(res.file.track) ? res.file.track : [res.file.track];\n    res.file.track = tracks.map(track => mapValues(track, mapValue));\n  }\n  return res;\n};\n\nexport default function parse(buffer, callback = () => {}) {\n  xmlParseString(buffer, {\n    attrNameProcessors: [name => `_${name}`],\n    explicitArray: false,\n    explicitRoot: false,\n    mergeAttrs: true,\n    normalizeTags: true,\n    tagNameProcessors: [camelCase]\n  }, (err, obj) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    callback(null, transformResponse(obj));\n  });\n}\n\nfunction exec(mediaPath, callback = () => {}) {\n  const mediainfo = childProcess.spawn('mediainfo', ['--Full', '--Output=XML', mediaPath]);\n  let output = '';\n  mediainfo.stdout.on('data', (data) => { output += data.toString('utf8'); });\n  mediainfo.on('close', () => parse(output, callback));\n}\n\nexport {parse, exec};\n"]}